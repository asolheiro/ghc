variables:
  REPO_NAME: your-app-name
  VERSION: ${CI_COMMIT_TAG}
  PACKAGE_NAME: ${REPO_NAME}
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}"

stages:
  - build
  - upload
  - release

build:
  stage: build
  image: golang:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir -p dist
    # Linux AMD64
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o "dist/${REPO_NAME}-${VERSION}-linux-amd64" -ldflags="-X 'main.Version=${VERSION}'" ./main.go
    - cd dist && sha256sum "${REPO_NAME}-${VERSION}-linux-amd64" > "${REPO_NAME}-${VERSION}-linux-amd64.sha256" && cd ..
    - echo DONE
    
    # Linux ARM64
    - GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o "dist/${REPO_NAME}-${VERSION}-linux-arm64" -ldflags="-X 'main.Version=${VERSION}'" ./main.go
    - cd dist && sha256sum "${REPO_NAME}-${VERSION}-linux-arm64" > "${REPO_NAME}-${VERSION}-linux-arm64.sha256" && cd ..
    - echo DONE

    # Windows AMD64
    - GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o "dist/${REPO_NAME}-${VERSION}-windows-amd64.exe" -ldflags="-X 'main.Version=${VERSION}'" ./main.go
    - cd dist && sha256sum "${REPO_NAME}-${VERSION}-windows-amd64.exe" > "${REPO_NAME}-${VERSION}-windows-amd64.exe.sha256" && cd ..
    - echo DONE

    # Darwin (macOS) AMD64
    - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o "dist/${REPO_NAME}-${VERSION}-darwin-amd64" -ldflags="-X 'main.Version=${VERSION}'" ./main.go
    - cd dist && sha256sum "${REPO_NAME}-${VERSION}-darwin-amd64" > "${REPO_NAME}-${VERSION}-darwin-amd64.sha256" && cd ..
    - echo DONE

    # Darwin (macOS) ARM64
    - GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o "dist/${REPO_NAME}-${VERSION}-darwin-arm64" -ldflags="-X 'main.Version=${VERSION}'" ./main.go
    - cd dist && sha256sum "${REPO_NAME}-${VERSION}-darwin-arm64" > "${REPO_NAME}-${VERSION}-darwin-arm64.sha256" && cd ..
    - echo DONE
    
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - build
  script:
    - |
      for file in dist/*; do
        filename=$(basename $file)
        echo "Uploading $filename to Package Registry..."
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          --upload-file $file \
          "${PACKAGE_REGISTRY_URL}/${filename}"
      done

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - upload
  script:
    - |
      # Create array of binary names
      BINARIES=(
        "${REPO_NAME}-${VERSION}-linux-amd64"
        "${REPO_NAME}-${VERSION}-linux-arm64"
        "${REPO_NAME}-${VERSION}-windows-amd64.exe"
        "${REPO_NAME}-${VERSION}-darwin-amd64"
        "${REPO_NAME}-${VERSION}-darwin-arm64"
      )
      
      # Prepare assets links
      assets_links=""
      for binary in "${BINARIES[@]}"; do
        # Add binary
        assets_links="$assets_links --assets-link={\"name\":\"$binary\",\"url\":\"${PACKAGE_REGISTRY_URL}/${binary}\"}"
        # Add checksum file
        assets_links="$assets_links --assets-link={\"name\":\"$binary.sha256\",\"url\":\"${PACKAGE_REGISTRY_URL}/${binary}.sha256\"}"
      done
      
      # Create release with all assets
      release-cli create \
        --name "Release ${VERSION}" \
        --tag-name $CI_COMMIT_TAG \
        --description "Release ${VERSION}" \
        $assets_links